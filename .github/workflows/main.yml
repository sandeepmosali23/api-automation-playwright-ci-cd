name: 🚀 API Test Automation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

jobs:
  api-tests:
    name: 🧪 API Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [production, staging]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npx playwright install
    
    - name: 🧪 Run API Tests
      run: |
        echo "🚀 Running tests for environment: ${{ matrix.environment }}"
        echo "📁 Using test file: tests/api/user-management.spec.js"
        npx playwright test tests/api/user-management.spec.js --reporter=html
      env:
        TEST_ENVIRONMENT: ${{ matrix.environment }}
        CI: true
    
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.environment }}
        path: |
          playwright-report/
          test-results/
        retention-days: 7
    
    - name: 📈 Upload HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.environment }}
        path: playwright-report/
        retention-days: 30

  # Performance Tests Job
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: api-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 📦 Install Dependencies
      run: |
        npm ci
        npx playwright install
    
    - name: ⚡ Run Performance Tests (5x Each Test)
      run: |
        echo "⚡ Running performance tests..."
        npx playwright test tests/api/user-management.spec.js --repeat-each=5 --reporter=json > performance-results.json
    
    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json

  # Test Summary Job
  test-summary:
    name: 📋 Test Summary & Notification
    runs-on: ubuntu-latest
    needs: [api-tests, performance-tests]
    if: always()
    
    steps:
    - name: 📥 Download Test Results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
    
    - name: 📋 Generate Test Summary
      run: |
        echo "# 🧪 API Test Automation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Job Results" >> $GITHUB_STEP_SUMMARY
        echo "- **API Tests (Production):** ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **API Tests (Staging):** ${{ needs.api-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance Tests:** ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Resources" >> $GITHUB_STEP_SUMMARY
        echo "- **Test File:** \`tests/api/user-management.spec.js\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** Multi-environment (production, staging)" >> $GITHUB_STEP_SUMMARY
        echo "- **Reports:** Available in job artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Deployment decision
        if [ "${{ needs.api-tests.result }}" = "success" ]; then
          echo "## ✅ Deployment Status: APPROVED" >> $GITHUB_STEP_SUMMARY
          echo "All API tests passed successfully across environments!" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Status: BLOCKED" >> $GITHUB_STEP_SUMMARY
          echo "API tests failed. Deployment should be blocked until issues are resolved." >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: 📢 Create Success Comment
      if: needs.api-tests.result == 'success'
      run: |
        echo "🎉 **API Tests Successful!**" >> comment.md
        echo "" >> comment.md
        echo "✅ All tests passed across production and staging environments" >> comment.md
        echo "⚡ Performance tests completed successfully" >> comment.md
        echo "🚀 **Ready for deployment!**" >> comment.md
        
    - name: 📢 Create Failure Comment
      if: needs.api-tests.result != 'success'
      run: |
        echo "❌ **API Tests Failed**" >> comment.md
        echo "" >> comment.md
        echo "🔍 Check the job logs for detailed error information" >> comment.md
        echo "🚫 **Deployment blocked until issues are resolved**" >> comment.md
